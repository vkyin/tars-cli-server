// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tools(20180620)
// TarsParser Maintained By <WSRD> and tools Maintained By <superzheng>
// Generated from "command.tars" by Server Mode
// **********************************************************************

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");

var Command = Command || {};
module.exports.Command = Command;

Command.TarsDeploy = function() {
    this.serverName = "";
    this.filebuff = new TarsStream.BinBuffer;
    this._classname = "Command.TarsDeploy";
};
Command.TarsDeploy._classname = "Command.TarsDeploy";
Command.TarsDeploy._write = function (os, tag, value) { os.writeStruct(tag, value); };
Command.TarsDeploy._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
Command.TarsDeploy._readFrom = function (is) {
    var tmp = new Command.TarsDeploy();
    tmp.serverName = is.readString(0, true, "");
    tmp.filebuff = is.readBytes(1, true, TarsStream.BinBuffer);
    return tmp;
};
Command.TarsDeploy.prototype._writeTo = function (os) {
    os.writeString(0, this.serverName);
    os.writeBytes(1, this.filebuff);
};
Command.TarsDeploy.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
Command.TarsDeploy.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
Command.TarsDeploy.prototype.toObject = function() { 
    return {
        "serverName" : this.serverName,
        "filebuff" : this.filebuff.toObject()
    };
};
Command.TarsDeploy.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("serverName") && (this.serverName = json.serverName);
    json.hasOwnProperty("filebuff") && (this.filebuff.readFromObject(json.filebuff));
};
Command.TarsDeploy.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
Command.TarsDeploy.new = function () {
    return new Command.TarsDeploy();
};
Command.TarsDeploy.create = function (is) {
    return Command.TarsDeploy._readFrom(is);
};




